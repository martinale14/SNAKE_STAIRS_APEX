public with sharing class GameController {
    @RemoteAction
    public static String initGame(Integer width, Integer height, Integer playerCount){
        Board__c board = new Board__c(Width__c = width, Height__c = height); // Creation of the board itself

        insert board; // Saving the board on the database

        List<Obstacle__c> obstacles = [SELECT Type__c, From__c, To__c FROM Obstacle__c WHERE Board__r.Id = :board.id]; // Getting the obstacles generated by the board

        List<Player__c> players = new List<Player__c>(); // Creating the player array
        // Filling the player array with players 
        for(Integer i = 0; i < playerCount; i++){
            players.add(new Player__c(Position__c = 0, Number__c = i + 1, Board__c = board.Id));
        }

        insert players; // Saving players on the database

        board = [SELECT Size__c FROM Board__c WHERE Id = :board.Id]; // Getting other board necessary board properties
        players = [SELECT Position__c, Number__c FROM Player__c WHERE Board__r.Id = :board.Id]; // Getting other players properties to avoid errors

        List<Integer> places = new List<Integer>(); // Initializing the places for the end of the game
        Integer turn = 0; // Initializing the turns of the game
        
        String gameResume = ''; // Starting the variable that is going to contain the game resume

        // Declaring the loop game conrolled by comparing the lenght of the players with the lenght of the places array
        while(places.size() != players.size()){

            // Here we validate wheter the player has finish alredy so, if the player finish the game the turn is going to be skiped
            if(!places.contains(turn)){
                
                Player__c player = players[turn]; // Choosing the player by turn
                
                Integer dieNumber = Die.roll(); // We roll the die 
                gameResume += 'The die rolls ' + dieNumber + '-'; // adding the number of the die to the resuma

                Integer initialPosition = player.Position__c.intValue(); // Saving the initial position for calculating the steps
                player.Position__c = initialPosition + dieNumber; // Moving our player

                // Validating if the player exceed the maximun number of the board
                if(player.Position__c > board.Size__c.intValue()){
                    Integer newPosition = (2 * board.Size__c.intValue()) - player.Position__c.intValue(); // Calculating the ne position if the player goes back for exceed the board last number
                    player.Position__c = newPosition < 0 ? 0 : newPosition; // Changing the player position
                }

                // Initialize the loop that let us try all the obstacles
                for(Obstacle__c e : obstacles){
                    // Validating if the player is in an obstacle
                    if(e.From__c == player.Position__c.intValue()){
                        gameResume += (e.From__c > e.To__c ? 'Oops you fall on an snake-' : 'Good Luck you can go up the stair-'); // Giving feedback about the obstacle
                        player.Position__C = e.To__c.intValue(); // Changing the player position
                        gameResume += String.format('{0} [from: {1}, to: {2}]-', new String[]{e.Type__c, String.valueOf(e.From__c), String.valueOf(e.To__c)}); // Adding the obstacle info to the resume
                    }
                }

                Integer step = Math.abs(player.Position__c.intValue() - initialPosition); // Calculating the step between the initial position and the final position of the player
                // Showing to the user the steps he moved and if is in positive or negative sense
                gameResume += String.format('The Player {0} {1} {2} position{3}-', new String[]{String.valueOf(player.Number__c), player.Position__c > initialPosition ? 'advances' : 'goes back', String.valueOf(step), step > 1 ? 's' : ''}); 
                // Showing to the user his actual position
                gameResume += String.format('The Player {0} is now on {1}-', new String[]{String.valueOf(player.Number__c), String.valueOf(player.Position__c)});

                // Calculating if the player alredy wins
                if((player.Position__c.intValue() == board.Size__c.intValue()) || (players.size() != 1 ? (places.size() == (players.size() - 1)) : false)){
                    places.add(turn); // Adding the player to his place when finish the game
                    players[turn] = player;
                }

                // Adding spaces to better lecture
                gameResume += '-';

            }

            turn = turn == (players.size() - 1) ? 0 : (turn + 1); // Changing the turn

        }

        update players; // Updating the players info after the game ends

        gameResume += '-'; // Givin g space

        // Loop that let us see all the places
        for(Integer i = 0; i < places.size(); i++){
            // Printing the player with his place
            gameResume += String.format('{0}: Player {1} {2}-', new String[]{String.valueOf(i + 1), String.valueOf(places[i] + 1), i == 0 ? '(Winner)' : ''});
        }

        return gameResume; // Returning the resume
    }
}